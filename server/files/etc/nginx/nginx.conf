# user and group to run as
user  app app;

# number of nginx workers
worker_processes  6;

# pid of nginx master process
pid /var/run/nginx.pid;

# Number of worker connections. 1024 is a good default
events {
  worker_connections  1024;
  use epoll; # linux only!
}

# start the http module where we config http access.
http {
  # pull in mime-types. You can break out your config 
  # into as many include's as you want to make it cleaner
  include /etc/nginx/mime.types;
  
  # set a default type for the rare situation that
  # nothing matches from the mimie-type include
  default_type  application/octet-stream;

  # configure log format
  log_format main '$remote_addr [$time_local] '
                  '"$scheme $host $request" $status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" '
                  '($request_time');
  
  # main access log
  access_log  /mnt/log/nginx/access.log  main;

  # main error log - Do not comment out. If you do not want the log file set this to /dev/null
  # use debug instead of notice if you want additional information
  error_log  /mnt/log/nginx/error.log notice;

  # no sendfile on OSX
  sendfile on;

  # These are good default values.
  tcp_nopush        on;
  tcp_nodelay       on;
  # output compression saves bandwidth 
  gzip              on;
  gzip_http_version 1.0;
  gzip_comp_level   5;
  gzip_proxied      any;
  gzip_types        text/plain \
                    text/html \
                    text/css \
                    application/x-javascript \
                    text/xml \
                    application/xml \
                    application/xml+rss \
                    text/javascript;
  

  # this is where you define your mongrel clusters. 
  # you need one of these blocks for each cluster
  # and each one needs its own name to refer to it later.
  include /etc/ec2onrails/nginx_upstream_members;
  
  
  # the server directive is nginx's virtual host directive.
  server {
    # port to listen on. Can also be set to an IP:PORT
    listen 80;
    
    # Set the max size for file uploads to 50Mb
    client_max_body_size 50M;

    # sets the domain[s] that this vhost server requests for
    # server_name www.[ec2onrails].com [ec2onrails].com;
    server_name _;

    # uncomment to force a redirect to www
    # if ($host ~* "^[ec2onrails].com$"){
    #   rewrite ^(.*)$ http://www.[ec2onrails].com$1 permanent;
    #   break;
    # }
    
    # uncomment if you want to allow or force some or all pages to go to http:// instead of https://
    # if redirecting all to https, you won't need any of the other directives below the rewrite/break
    # set $sub 'www';
    # if  ($host ~* "^(.+?)\.[ec2onrails].com$"){
    #        set $sub $1;
    # }
    # 
    # if ( $uri ~* "^/.+$") {
    #    rewrite ^(.*)$ https://$sub.[ec2onrails].com$1 permanent;
    #    break;
    # }

    # doc root
    root /mnt/app/current/public;

    # vhost specific access log
    access_log  /mnt/log/nginx/vhost.access.log  main;
    error_page   400 /400.html;
    error_page   500 502 503 504  /500.html;
    location = /500.html {
      root /mnt/app/current/public;
    }

    # this allows people to use images and css in their maintenance.html file
    if ($request_filename ~* \.(css|jpg|gif|png)$) {
	    break;
    }
		
    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task
    if (-f $document_root/system/maintenance.html) {
      rewrite  ^(.*)$  /system/maintenance.html last;
      break;
    }
    
    # see http://wiki.codemongers.com/NginxHttpStubStatusModule 
    # for more information
    location /nginx_status {
        # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/
        stub_status on;
        access_log   off;
        #only allow from localhost
        allow 127.0.0.1; 
        deny all;
    }
    
    location / {
      # FUTURE TODO...enable this and test the hell out of it
      # if ($request_method = GET) {
      #    set $memcached_key $uri;
      #    memcached_pass 127.0.0.1:11211;
      #    error_page 404 502 = @myapp;
      #    break;
      # }

      index  index.html index.htm;
      
      # needed to forward user's IP address to rails
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_redirect    false;
      proxy_max_temp_file_size 0;
      proxy_next_upstream      error;  # do not pass along to another mongrel instance if failed or timed out
      proxy_read_timeout       400;    # give plenty of time for long-running rails processing tasks
      #the proxy_connect_timeout cannot be more than 75
      proxy_connect_timeout 70;
      
      location ~ ^/(images|javascripts|stylesheets)/ {
        expires 10y;
      }
    
      if (-f $request_filename) { 
        break; 
      }

      # this is the meat of the rails page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end 
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the 
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      #proxy to mongrel
      if (!-f $request_filename) {
        proxy_pass http://mongrel;
        break;
      }
    }
  }
  
  # This server is setup for ssl. Uncomment if 
  # you are using ssl as well as port 80.
  # server {
  #   # port to listen on. Can also be set to an IP:PORT
  #   listen 443;
  #   
  #   # Set the max size for file uploads to 50Mb
  #   client_max_body_size 50M;
  # 
  #   # sets the domain[s] that this vhost server requests for
  #   # server_name www.[ec2onrails].com [ec2onrails].com;
  #   server_name _;
  # 
  #   # uncomment to force a redirect to www
  #   # if ($host ~* "^[ec2onrails].com$"){
  #   #   rewrite ^(.*)$ http://www.[ec2onrails].com$1 permanent;
  #   #   break;
  #   # }
  # 
  #   ssl                  on;
  #   ssl_certificate      /etc/nginx/your_cert.crt;
  #   ssl_certificate_key  /etc/nginx/your_cert.key;
  #   
  #   # doc root
  #   root /mnt/app/current/public;
  # 
  #   # vhost specific access log
  #   access_log  /mnt/log/nginx/vhost.access.log  main;
  #   error_page   400 /400.html;
  #   error_page   500 502 503 504  /500.html;
  #   location = /500.html {
  #     root /mnt/app/current/public;
  #   }
  # 
  #   # this allows people to use images and css in their maintenance.html file
  #   if ($request_filename ~* \.(css|jpg|gif|png)$) {
  #       break;
  #   }
  #      
  #   # this rewrites all the requests to the maintenance.html
  #   # page if it exists in the doc root. This is for capistrano's
  #   # disable web task
  #   if (-f $document_root/system/maintenance.html) {
  #     rewrite  ^(.*)$  /system/maintenance.html last;
  #     break;
  #   }
  #   
  #   # see http://wiki.codemongers.com/NginxHttpStubStatusModule 
  #   # for more information
  #   location /nginx_status {
  #       # copied from http://blog.kovyrin.net/2006/04/29/monitoring-nginx-with-rrdtool/
  #       stub_status on;
  #       access_log   off;
  #       #only allow from localhost
  #       allow 127.0.0.1; 
  #       deny all;
  #   }
  # 
  #   location / {
  #      # FUTURE TODO...enable this and test the hell out of it
  #      # if ($request_method = GET) {
  #      #    set $memcached_key $uri;
  #      #    memcached_pass 127.0.0.1:11211;
  #      #    error_page 404 502 = @myapp;
  #      #    break;
  #      # }
  # 
  #      index  index.html index.htm;
  # 
  #      # needed to forward user's IP address to rails
  #      proxy_set_header  X-Real-IP  $remote_addr;
  #      # needed for HTTPS
  #      proxy_set_header X_FORWARDED_PROTO https;
  #      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #      proxy_set_header Host $http_host;
  #      proxy_redirect   false;
  #      proxy_max_temp_file_size 0;
  #      proxy_next_upstream      error;  # do not pass along to another mongrel instance if failed or timed out
  #      proxy_read_timeout       400;    # give plenty of time for long-running rails processing tasks
  #      #the proxy_connect_timeout cannot be more than 75
  #      proxy_connect_timeout 70;
  # 
  #      location ~ ^/(images|javascripts|stylesheets)/ {
  #        expires 10y;
  #      }
  # 
  #     if (-f $request_filename) { 
  #       break; 
  #     }
  # 
  #     # this is the meat of the rails page caching config
  #     # it adds .html to the end of the url and then checks
  #     # the filesystem for that file. If it exists, then we
  #     # rewite the url to have explicit .html on the end 
  #     # and then send it on its way to the next config rule.
  #     # if there is no file on the fs then it sets all the 
  #     # necessary headers and proxies to our upstream mongrels
  #     if (-f $request_filename.html) {
  #       rewrite (.*) $1.html break;
  #     }
  #     
  #     # ok to have this out here because PDF's should never 
  #     # be fully paged cache anyway
  #     if ($request_filename ~* \.pdf$) {
  #        proxy_pass http://mongrel_pdf;
  #         break;
  #     }
  # 
  #     if (!-f $request_filename) {
  #       proxy_pass http://mongrel;
  #       break;
  #     }
  #   }
  # 
  # }
}

